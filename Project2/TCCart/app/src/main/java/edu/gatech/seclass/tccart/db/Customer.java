package edu.gatech.seclass.tccart.db;

import java.util.List;
import edu.gatech.seclass.tccart.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "Customers".
 */
public class Customer extends CustomerBase  {

    /** Not-null value. */
    private String UniqueID;
    /** Not-null value. */
    private String Email;
    /** Not-null value. */
    private String Name;
    private Boolean VIP;
    private Double RewardBalance;
    private Double SpendBalance;
    private java.util.Date RewardExpireDate;
    private java.util.Date VIPDiscountBegins;
    private Boolean VIPNotificationSent;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CustomerDao myDao;

    private List<Transaction> transactions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Customer() {
    }

    public Customer(String UniqueID) {
        this.UniqueID = UniqueID;
    }

    public Customer(String UniqueID, String Email, String Name, Boolean VIP, Double RewardBalance, Double SpendBalance, java.util.Date RewardExpireDate, java.util.Date VIPDiscountBegins, Boolean VIPNotificationSent) {
        this.UniqueID = UniqueID;
        this.Email = Email;
        this.Name = Name;
        this.VIP = VIP;
        this.RewardBalance = RewardBalance;
        this.SpendBalance = SpendBalance;
        this.RewardExpireDate = RewardExpireDate;
        this.VIPDiscountBegins = VIPDiscountBegins;
        this.VIPNotificationSent = VIPNotificationSent;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCustomerDao() : null;
    }

    /** Not-null value. */
    public String getUniqueID() {
        return UniqueID;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUniqueID(String UniqueID) {
        this.UniqueID = UniqueID;
    }

    /** Not-null value. */
    public String getEmail() {
        return Email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String Email) {
        this.Email = Email;
    }

    /** Not-null value. */
    public String getName() {
        return Name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String Name) {
        this.Name = Name;
    }

    public Boolean getVIP() {
        return VIP;
    }

    public void setVIP(Boolean VIP) {
        this.VIP = VIP;
    }

    public Double getRewardBalance() {
        return RewardBalance;
    }

    public void setRewardBalance(Double RewardBalance) {
        this.RewardBalance = RewardBalance;
    }

    public Double getSpendBalance() {
        return SpendBalance;
    }

    public void setSpendBalance(Double SpendBalance) {
        this.SpendBalance = SpendBalance;
    }

    public java.util.Date getRewardExpireDate() {
        return RewardExpireDate;
    }

    public void setRewardExpireDate(java.util.Date RewardExpireDate) {
        this.RewardExpireDate = RewardExpireDate;
    }

    public java.util.Date getVIPDiscountBegins() {
        return VIPDiscountBegins;
    }

    public void setVIPDiscountBegins(java.util.Date VIPDiscountBegins) {
        this.VIPDiscountBegins = VIPDiscountBegins;
    }

    public Boolean getVIPNotificationSent() {
        return VIPNotificationSent;
    }

    public void setVIPNotificationSent(Boolean VIPNotificationSent) {
        this.VIPNotificationSent = VIPNotificationSent;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Transaction> getTransactions() {
        if (transactions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TransactionDao targetDao = daoSession.getTransactionDao();
            List<Transaction> transactionsNew = targetDao._queryCustomer_Transactions(UniqueID);
            synchronized (this) {
                if(transactions == null) {
                    transactions = transactionsNew;
                }
            }
        }
        return transactions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetTransactions() {
        transactions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public Transaction CreateNewTransaction(){
        return new Transaction(this);
    }

    // KEEP METHODS END

}
