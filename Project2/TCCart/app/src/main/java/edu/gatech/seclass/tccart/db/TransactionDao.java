package edu.gatech.seclass.tccart.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import edu.gatech.seclass.tccart.db.Transaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CustomerTransactions".
*/
public class TransactionDao extends AbstractDao<Transaction, Long> {

    public static final String TABLENAME = "CustomerTransactions";

    /**
     * Properties of entity Transaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "transactionId");
        public final static Property CustomerID = new Property(1, String.class, "customerID", false, "CUSTOMER_ID");
        public final static Property TransactionDate = new Property(2, java.util.Date.class, "TransactionDate", false, "TRANSACTION_DATE");
        public final static Property CartTotal = new Property(3, Double.class, "CartTotal", false, "CART_TOTAL");
        public final static Property CreditDiscount = new Property(4, Double.class, "CreditDiscount", false, "CREDIT_DISCOUNT");
        public final static Property VIPDiscount = new Property(5, Double.class, "VIPDiscount", false, "VIPDISCOUNT");
        public final static Property Total = new Property(6, Double.class, "Total", false, "TOTAL");
    };

    private Query<Transaction> customer_TransactionsQuery;

    public TransactionDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CustomerTransactions\" (" + //
                "\"transactionId\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CUSTOMER_ID\" TEXT," + // 1: customerID
                "\"TRANSACTION_DATE\" INTEGER," + // 2: TransactionDate
                "\"CART_TOTAL\" REAL," + // 3: CartTotal
                "\"CREDIT_DISCOUNT\" REAL," + // 4: CreditDiscount
                "\"VIPDISCOUNT\" REAL," + // 5: VIPDiscount
                "\"TOTAL\" REAL);"); // 6: Total
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CustomerTransactions\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Transaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String customerID = entity.getCustomerID();
        if (customerID != null) {
            stmt.bindString(2, customerID);
        }
 
        java.util.Date TransactionDate = entity.getTransactionDate();
        if (TransactionDate != null) {
            stmt.bindLong(3, TransactionDate.getTime());
        }
 
        Double CartTotal = entity.getCartTotal();
        if (CartTotal != null) {
            stmt.bindDouble(4, CartTotal);
        }
 
        Double CreditDiscount = entity.getCreditDiscount();
        if (CreditDiscount != null) {
            stmt.bindDouble(5, CreditDiscount);
        }
 
        Double VIPDiscount = entity.getVIPDiscount();
        if (VIPDiscount != null) {
            stmt.bindDouble(6, VIPDiscount);
        }
 
        Double Total = entity.getTotal();
        if (Total != null) {
            stmt.bindDouble(7, Total);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Transaction readEntity(Cursor cursor, int offset) {
        Transaction entity = new Transaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customerID
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // TransactionDate
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // CartTotal
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // CreditDiscount
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // VIPDiscount
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6) // Total
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Transaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCustomerID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTransactionDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setCartTotal(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCreditDiscount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setVIPDiscount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setTotal(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Transaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Transaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "transactions" to-many relationship of Customer. */
    public List<Transaction> _queryCustomer_Transactions(String customerID) {
        synchronized (this) {
            if (customer_TransactionsQuery == null) {
                QueryBuilder<Transaction> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CustomerID.eq(null));
                queryBuilder.orderRaw("T.'TRANSACTION_DATE' ASC");
                customer_TransactionsQuery = queryBuilder.build();
            }
        }
        Query<Transaction> query = customer_TransactionsQuery.forCurrentThread();
        query.setParameter(0, customerID);
        return query.list();
    }

}
